openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0

paths:
  /users/v1/:
    get:
      summary: Retrieve current user details
      operationId: getUserDetails
      responses:
        default:
          $ref: '#/components/responses/HttpErrorResponse'
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReq'
    post:
      summary: Add a new user
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserReq'
      responses:
        default:
          $ref: '#/components/responses/HttpErrorResponse'
        '201':
          description: User added successfully
    put:
      summary: Update a user by ID
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserReq'
      responses:
        default:
          $ref: '#/components/responses/HttpErrorResponse'

        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReq'
        '404':
          description: User not found

  /users/v1/update-profile-photo:
    put:
      summary: Update a user profile photo
      operationId: updateUserProfilePhoto
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserUpdateReq'
      responses:
        default:
          $ref: '#/components/responses/HttpErrorResponse'

        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReq'
        '404':
          description: User not found
  /users/v1/search:
    get:
      tags:
        - Users
      summary: Search users
      description: It will provide search capability on users.
      operationId: searchUsers
      parameters:
        - name: query
          in: query
          description: Search user on basis on RSQL expression
          required: false
          explode: true
          schema:
            type: string
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
        - name: size
          in: query
          required: true
          schema:
            type: integer
        - name: page
          in: query
          required: true
          schema:
            type: integer
        - name: sortDir
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/HttpErrorResponse'

  /users/v1/{userId}:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    get:
      summary: Retrieve a user by ID
      operationId: getUserById
      responses:
        default:
          $ref: '#/components/responses/HttpErrorResponse'
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReq'
        '404':
          description: User not found
    delete:
      summary: Delete a user by ID
      operationId: deleteUser
      responses:
        default:
          $ref: '#/components/responses/HttpErrorResponse'
        '204':
          description: User deleted successfully
        '404':
          description: User not found

components:
  schemas:

    # User entity
    UserReq:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
          example: user123
        email:
          type: string
          example: user@example.com
        profileImage:
          type: string
#        gender:
#          type: string
#          enum:
#            - Male
#            - Female
#            - Others


    UserUpdateReq:
      required:
        - file
      type: object
      properties:
        file:
          type: string
          format: binary

    APIError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

  responses:
    HttpErrorResponse:
      description: The request has failed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'