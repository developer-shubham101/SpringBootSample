package com.example.reactive.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import java.time.LocalDateTime;

/**
 * Represents a product order in the reactive e-commerce system.
 * This class is designed to work with MongoDB in a reactive manner.
 *
 * Key Features:
 * - Uses MongoDB's document structure for efficient storage and retrieval
 * - Supports reactive operations through Spring Data MongoDB Reactive
 * - Implements automatic timestamp tracking for order creation
 * - Provides flexible order status management
 *
 * Usage in Reactive Context:
 * - Can be used with ReactiveMongoRepository for non-blocking operations
 * - Supports reactive streams through Project Reactor (Mono/Flux)
 * - Enables reactive event processing for order status updates
 *
 * @Document annotation specifies the MongoDB collection name as "orders"
 * @Id annotation marks the primary identifier field for MongoDB
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Document(collection = "orders")
public class ProductOrder {
    
    /**
     * Unique identifier for the order.
     * MongoDB uses String type for _id field by default.
     * This field is automatically generated by MongoDB when a new document is created.
     */
    @Id
    private String id;
    
    /**
     * Reference to the ordered product.
     * Stores the MongoDB _id of the associated Product document.
     * Used for maintaining relationships between orders and products.
     */
    private String productId;
    
    /**
     * Number of units ordered.
     * Must be a positive integer.
     * Used for inventory management and order processing.
     */
    private int quantity;
    
    /**
     * Current status of the order.
     * Possible values: PENDING, CONFIRMED, SHIPPED, DELIVERED, CANCELLED
     * Used for order lifecycle management and status tracking.
     */
    private String orderStatus;
    
    /**
     * Timestamp when the order was created.
     * Automatically set to current time when a new order is created.
     * Used for order tracking and reporting.
     */
    private LocalDateTime orderDate;

    /**
     * Creates a new order with the specified details.
     * Automatically sets the order date to the current time.
     *
     * @param productId The ID of the product being ordered
     * @param quantity The number of units ordered
     * @param orderStatus The initial status of the order
     */
    public ProductOrder(String productId, int quantity, String orderStatus) {
        this.productId = productId;
        this.quantity = quantity;
        this.orderStatus = orderStatus;
        this.orderDate = LocalDateTime.now();
    }
} 